using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using OofemLink.Data;

namespace OofemLink.Business.Export
{
	class OofemInputFileExportService : IExportService
	{
		readonly string fileFullPath;
		readonly DataContext context;

		public OofemInputFileExportService(DataContext context, string fileFullPath)
		{
			this.context = context;
			if (!string.IsNullOrEmpty(fileFullPath))
				this.fileFullPath = fileFullPath;
			else
				this.fileFullPath = "oofem.in";
		}

		public void ExportSimulation(int simulationId)
		{
#if true    
			// OofemInputWriter
			{
				using (var stream = new FileStream(fileFullPath, FileMode.Create, FileAccess.Write, FileShare.None))
				using (var streamWriter = new StreamWriter(stream))
				{
					var input = new OofemInputWriter(streamWriter);
					createOofemInput(input, simulationId);
				}
			}
#else
			// OofemInputBuilder
			{
				var input = new OofemInputBuilder();
				createOofemInput(input, simulationId);
				using (var stream = new FileStream(fileFullPath, FileMode.Create, FileAccess.Write, FileShare.None))
				using (var streamWriter = new StreamWriter(stream))
				{
					input.WriteTo(streamWriter);
				}
			}
#endif
		}

		private void createOofemInput<TService>(IOofemInputCreator<TService> input, int simulationId)
		{
			var simulation = context.Simulations.Include(s => s.Project).SingleOrDefault(s => s.Id == simulationId);
			if (simulation == null)
				throw new KeyNotFoundException($"Simulation with id {simulationId} was not found.");

			input.AddInputRecord(new CommentInputRecord($"OOFEM input file generated by " + getProgramDescription()));
			// Output file name (first line in OOFEM input files).
			input.AddInputRecord(new StringInputRecord("oofem.out"));
			// Description line (second line in OOFEM input files).
			input.AddInputRecord(new StringInputRecord($"Project: {simulation.Project?.Name}, Task: {simulation.TaskName}"));
			// ...
		}

		private static string getProgramDescription()
		{
			var assembly = Assembly.GetEntryAssembly();
			var assemblyTitleAttribute = assembly.GetCustomAttribute<AssemblyTitleAttribute>();
			var assemblyFileVersionAttribute = assembly.GetCustomAttribute<AssemblyFileVersionAttribute>();
			return $"{assemblyTitleAttribute.Title} version {assemblyFileVersionAttribute.Version}";
		}
	}
}
