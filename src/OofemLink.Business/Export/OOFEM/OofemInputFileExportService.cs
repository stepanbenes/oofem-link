using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using OofemLink.Data;

namespace OofemLink.Business.Export.OOFEM
{
	class OofemInputFileExportService : IExportService
	{
		#region Fields, constructor

		readonly string fileFullPath;
		readonly DataContext context;

		public OofemInputFileExportService(DataContext context, string fileFullPath)
		{
			this.context = context;
			if (!string.IsNullOrEmpty(fileFullPath))
				this.fileFullPath = fileFullPath;
			else
				this.fileFullPath = "oofem.in";
		}

		#endregion

		#region Public methods

		public void ExportSimulation(int simulationId)
		{
			using (var input = new InputBuilder(fileFullPath))
			{
				createOofemInput(input, simulationId);
			}
		}

		#endregion

		#region Private methods

		private void createOofemInput(InputBuilder input, int simulationId)
		{
			var simulation = context.Simulations
								.Include(s => s.Project)
								.Include(s => s.Models)
								.ThenInclude(m => m.Meshes)
								.FirstOrDefault(s => s.Id == simulationId);

			if (simulation == null)
				throw new KeyNotFoundException($"Simulation with id {simulationId} was not found.");
			if (simulation.Models.Count == 0)
				throw new InvalidDataException($"Simulation {simulationId} does not contain any model.");
			if (simulation.Models.Count > 1)
				throw new InvalidDataException($"Simulation {simulationId} contains more then one model.");

			var model = simulation.Models.Single();

			if (model.Meshes.Count == 0)
				throw new InvalidDataException($"No mesh found for model {model.Id}.");
			if (model.Meshes.Count > 1)
				throw new NotSupportedException($"Multiple meshes for single model are not yet supported (model {model.Id}).");

			var mesh = model.Meshes.Single();

			input.AddComment($"OOFEM input file generated by " + getProgramDescription());
			// Output file name (first line in OOFEM input files).
			input.Add(new EmptyRecord("oofem.out"));
			// Description line (second line in OOFEM input files).
			input.Add(new EmptyRecord($"Project: {simulation.Project?.Name}, Task: {simulation.TaskName}"));

			// ...

			var nodesQuery = from node in context.Nodes
							 where node.MeshId == mesh.Id
							 select node;

			foreach (var node in nodesQuery)
			{
				var record = new KeyRecord(Keyword.node, node.Id, new ArrayRecord<double>(Keyword.coords, node.X, node.Y, node.Z));
				input.Add(record);
			}
		}

		private static string getProgramDescription()
		{
			var assembly = Assembly.GetEntryAssembly();
			var assemblyTitleAttribute = assembly.GetCustomAttribute<AssemblyTitleAttribute>();
			var assemblyFileVersionAttribute = assembly.GetCustomAttribute<AssemblyFileVersionAttribute>();
			return $"{assemblyTitleAttribute.Title} version {assemblyFileVersionAttribute.Version}";
		}

		#endregion
	}
}
